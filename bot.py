import os
import sys
import logging
import wave
import json
import subprocess
import asyncio
import re
from datetime import datetime, time, timedelta, timezone
from pathlib import Path
from typing import Dict, Optional, List, Any

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from vosk import Model, KaldiRecognizer
from dotenv import load_dotenv
import httpx
from tzlocal import get_localzone

from llama_handler import LlamaOptimized, ChatLogger, SummaryProcessor, SummaryStateManager

load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

logging.getLogger("httpx").setLevel(logging.WARNING)

# -----------------------------------------------------------------------------
# –ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# -----------------------------------------------------------------------------
class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    VOSK_MODEL_PATH = Path(os.getenv("VOSK_MODEL_PATH", "./vosk-model"))
    AUDIO_TEMP_DIR = Path(os.getenv("AUDIO_TEMP_DIR", "./temp_audio"))
    DAILY_SUMMARY_TIME = os.getenv("DAILY_SUMMARY_TIME", "23:00")
    LLAMA_SERVER_PATH = os.getenv("LLAMA_SERVER_PATH", "./llama.cpp/build/bin/llama-server")
    MODEL_PATH = os.getenv("MODEL_PATH", "./models/model.gguf")
    LOGS_DIR = Path(os.getenv("LOGS_DIR", "./chat_logs"))
    LOGS_DIR.mkdir(parents=True, exist_ok=True)

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
Config.AUDIO_TEMP_DIR.mkdir(parents=True, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Vosk
try:
    vosk_model = Model(str(Config.VOSK_MODEL_PATH))
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ Vosk: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è llama, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
llama = LlamaOptimized()
chat_logger = ChatLogger(Config.LOGS_DIR)
summary_state = SummaryStateManager()
summary_processor = SummaryProcessor()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ llama-server
llama_server_process = None

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------
def clean_response(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <thinking>, <system>, <assistant>, <user>, <summary>) –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
    text = re.sub(r'<(thinking|think)[^>]*>.*?</\1>', '', text, flags=re.DOTALL)
    text = re.sub(r'</?(user|assistant|system|summary)[^>]*>', '', text)
    text = re.sub(r'<\|end_of_turn\|>', '', text)
    return text.strip()

def is_bot_mentioned(update: Update, bot_username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç (–ø–æ @username) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞."""
    if update.message.entities:
        for entity in update.message.entities:
            if entity.type == "mention":
                mention = update.message.text[entity.offset: entity.offset + entity.length]
                if mention.lower() == f"@{bot_username.lower()}":
                    return True
    return False

def remove_old_logs(logs_dir: Path, days_to_keep: int = 7):
    """
    –£–¥–∞–ª—è–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs_dir, –∫–æ—Ç–æ—Ä—ã–º –±–æ–ª—å—à–µ days_to_keep –¥–Ω–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.
    """
    now = datetime.now()
    for file in logs_dir.iterdir():
        if file.is_file():
            created = datetime.fromtimestamp(file.stat().st_ctime)
            if (now - created) >= timedelta(days=days_to_keep):
                try:
                    file.unlink()
                    logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {file.name}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ {file.name}: {e}")

# -----------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -----------------------------------------------------------------------------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    text = (
        "üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
        "üîä –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /summarize [enable|disable] ‚Äî –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏\n"
        "‚Ä¢ /summarize ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
        "‚Ä¢ /clear ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏\n"
        "‚Ä¢ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ LLaMA\n"
    )
    await update.message.reply_text(text, parse_mode='HTML')

async def summarize_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /summarize:
    - –° –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º enable/disable –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞
    - –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (–µ—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞)
    """
    chat = update.message.chat
    args = context.args

    if args:
        subcommand = args[0].lower()
        if subcommand == "enable":
            summary_state.enable(chat.id)
            await update.message.reply_text("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return
        elif subcommand == "disable":
            summary_state.disable(chat.id)
            await update.message.reply_text("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if not summary_state.is_enabled(chat.id):
        await update.message.reply_text("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summarize enable –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.")
        return

    summary = await summary_processor.summarize(chat_id=chat.id, is_manual=True)
    await update.message.reply_text(f"–°–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{summary}")

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear ‚Äî –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–∞–º—è—Ç—å) –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞."""
    chat = update.message.chat
    ctx_key = str(chat.id) if chat.type != "private" else f"{chat.id}_{update.message.from_user.id}"
    llama.clear_context(ctx_key)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω.")

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å llama-server (–Ω–∞ —Å–ª—É—á–∞–π ¬´–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π¬ª –º–æ–¥–µ–ª–∏)."""
    global llama_server_process
    await update.message.reply_text("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ llama-server, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        await stop_llama_server(llama_server_process)
        llama_server_process = await start_llama_server()
        await update.message.reply_text("llama-server –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ llama-server: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ llama-server. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

# -----------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# -----------------------------------------------------------------------------
async def voice_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    ‚Äì –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (OGG‚ÜíWAV) –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk,
    ‚Äì —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞),
    ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    user = update.message.from_user
    chat = update.message.chat
    ctx_key = str(chat.id) if chat.type != "private" else f"{chat.id}_{user.id}"
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        timestamp_str = datetime.now().strftime("%Y%m%d%H%M%S%f")
        ogg_path = Config.AUDIO_TEMP_DIR / f"{timestamp_str}.ogg"
        wav_path = ogg_path.with_suffix(".wav")
        await file.download_to_drive(ogg_path)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV
        cmd = ['ffmpeg', '-y', '-i', str(ogg_path), '-ar', '16000', '-ac', '1', str(wav_path)]
        subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
        with wave.open(str(wav_path), 'rb') as wf:
            rec = KaldiRecognizer(vosk_model, wf.getframerate())
            results = []
            while True:
                data = wf.readframes(4000)
                if not data:
                    break
                if rec.AcceptWaveform(data):
                    res = json.loads(rec.Result())
                    results.append(res.get('text', ''))
            final_res = json.loads(rec.FinalResult())
            results.append(final_res.get('text', ''))
            recognized_text = ' '.join(results).strip()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        ogg_path.unlink(missing_ok=True)
        wav_path.unlink(missing_ok=True)

        if not recognized_text:
            raise ValueError("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞)
        chat_logger.log_message(chat_id=chat.id, user_id=user.id,
                                  message_id=update.message.message_id, text=recognized_text)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"<b>{user.full_name} (—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞):</b>\n{clean_response(recognized_text)}",
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            f"<b>{user.full_name}:</b>\n[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ]",
            parse_mode='HTML'
        )

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞),
    ‚Äì –≤ –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –±–æ—Ç–∞,
    ‚Äì –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ llama-server.
    """
    if not update.message:
        return
        
    user = update.message.from_user
    chat = update.message.chat
    text = update.message.text

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_logger.log_message(chat_id=chat.id, user_id=user.id,
                              message_id=update.message.message_id, text=text)

    # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç
    if chat.type != "private":
        bot_username = context.bot.username
        if not is_bot_mentioned(update, bot_username):
            return

    await context.bot.send_chat_action(chat.id, "typing")
    ctx_key = str(chat.id) if chat.type != "private" else f"{chat.id}_{user.id}"
    prompt = f"<user>{text}</user>"
    response = await llama.generate(prompt, ctx_key=ctx_key, tag="user") or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
    cleaned = clean_response(response)
    await update.message.reply_text(
        f"<b>{user.full_name}:</b>\n{cleaned}",
        parse_mode='HTML',
        disable_web_page_preview=True
    )

# -----------------------------------------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º llama-server
# -----------------------------------------------------------------------------
async def read_process_output(process):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ stdout –∏ stderr –ø—Ä–æ—Ü–µ—Å—Å–∞ llama-server."""
    while True:
        line = await process.stdout.readline()
        if not line:
            break
        logger.info(f"llama-server stdout: {line.decode().rstrip()}")
    while True:
        line = await process.stderr.readline()
        if not line:
            break
        logger.error(f"llama-server stderr: {line.decode().rstrip()}")

async def start_llama_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ llama-server —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    cmd = [
        str(Config.LLAMA_SERVER_PATH),
        "-m", Config.MODEL_PATH,
        "--ctx-size", os.getenv("MAX_CTX_SIZE", "2048"),
        "--threads", os.getenv("LLAMA_THREADS", "8"),
        "--batch-size", os.getenv("BATCH_SIZE", "512"),
        "--temp", os.getenv("GENERATION_TEMP", "0.7"),
        "--repeat-penalty", os.getenv("REPEAT_PENALTY", "1.1"),
        "--log-disable"
    ]
    process = await asyncio.create_subprocess_exec(
        *cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    logger.info(f"llama-server –∑–∞–ø—É—â–µ–Ω: {' '.join(cmd)}")
    asyncio.create_task(read_process_output(process))
    return process

async def stop_llama_server(process):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ llama-server."""
    if process and process.returncode is None:
        process.terminate()
        try:
            await asyncio.wait_for(process.wait(), timeout=10)
        except asyncio.TimeoutError:
            process.kill()
        logger.info("llama-server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -----------------------------------------------------------------------------
# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: —Å–≤–æ–¥–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
# -----------------------------------------------------------------------------
async def daily_summary_task(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ª–æ–≥–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤."""
    remove_old_logs(Config.LOGS_DIR, days_to_keep=7)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ (–∏–º—è —Ñ–∞–π–ª–∞: YYYY-MM-DD_<chat_id>.log)
    processed_chats = set()
    for log_file in Config.LOGS_DIR.glob("*_*.log"):
        try:
            chat_id_str = log_file.stem.split("_")[-1]
            chat_id = int(chat_id_str)
            if chat_id in processed_chats:
                continue
            processed_chats.add(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if not summary_state.is_enabled(chat_id):
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å
            messages = chat_logger.get_messages_today(chat_id)
            if not messages:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Ç {chat_id}: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
                continue
                
            summary = await summary_processor.summarize(chat_id=chat_id, is_manual=False)
            if summary and not summary.startswith("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"):
                try:
                    await context.bot.send_message(chat_id, f"–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n{summary}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏
                    summary_processor.update_last_auto_summary_time(chat_id)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –≤ —á–∞—Ç {chat_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {log_file.name}: {e}")

# -----------------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# -----------------------------------------------------------------------------
def main():
    global llama_server_process
    application = Application.builder().token(Config.BOT_TOKEN).build()

    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    existing_jobs = application.job_queue.get_jobs_by_name("daily_summary_task")
    for job in existing_jobs:
        job.schedule_removal()
    logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(existing_jobs)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("summarize", summarize_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("restart", restart_command))
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, voice_message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ 23:00 (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    local_tz = get_localzone()

    try:
        # –í—Ä–µ–º—è —Å–≤–æ–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        daily_time_local = datetime.strptime(Config.DAILY_SUMMARY_TIME, "%H:%M").time()
    except ValueError:
        daily_time_local = time(23, 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º —Å–≤–æ–¥–∫–∏
    today_local = datetime.combine(datetime.now(local_tz).date(), daily_time_local)
    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –æ—Å–≤–µ–¥–æ–º–ª—ë–Ω –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –¥–µ–ª–∞–µ–º –µ–≥–æ "aware"
    if today_local.tzinfo is None:
        today_local = today_local.replace(tzinfo=local_tz)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
    today_utc = today_local.astimezone(timezone.utc)
    utc_time = today_utc.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏
    existing_jobs = application.job_queue.get_jobs_by_name("daily_summary_task")
    if not existing_jobs:
        application.job_queue.run_daily(
            daily_summary_task,
            time=utc_time,
            days=(0, 1, 2, 3, 4, 5, 6),
            name="daily_summary_task"
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ {utc_time} UTC")
    else:
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    loop = asyncio.get_event_loop()
    llama_server_process = loop.run_until_complete(start_llama_server())

    try:
        application.run_polling()
    finally:
        loop.run_until_complete(stop_llama_server(llama_server_process))

if __name__ == "__main__":
    main()
